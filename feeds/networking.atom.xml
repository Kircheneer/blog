<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Kirchnered Networking - Networking</title><link href="https://kircheneer.github.io/blog/" rel="alternate"></link><link href="https://kircheneer.github.io/blog/feeds/networking.atom.xml" rel="self"></link><id>https://kircheneer.github.io/blog/</id><updated>2021-05-22T16:00:00+02:00</updated><subtitle>Network Engineer</subtitle><entry><title>Linux Networking for the Cisco Admin</title><link href="https://kircheneer.github.io/blog/linux-networking-for-the-cisco-admin.html" rel="alternate"></link><published>2021-05-22T16:00:00+02:00</published><updated>2021-05-22T16:00:00+02:00</updated><author><name>kirchnerl</name></author><id>tag:kircheneer.github.io,2021-05-22:/blog/linux-networking-for-the-cisco-admin.html</id><summary type="html">&lt;p&gt;If your job as a network administrator is anything like mine then
you often get pulled somewhat out of your comfort zone by supposed
network issues in end hosts. Some of the problems I've had to deal
with in this regard are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servers with multiple network interfaces where …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;If your job as a network administrator is anything like mine then
you often get pulled somewhat out of your comfort zone by supposed
network issues in end hosts. Some of the problems I've had to deal
with in this regard are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servers with multiple network interfaces where a firewall rule
  was requested for the wrong interface&lt;/li&gt;
&lt;li&gt;Applications that had trouble correctly setting up their sockets
  and as a consequence don't listen on the ports they are supposed
  to listen on&lt;/li&gt;
&lt;li&gt;Host firewalls blocking traffic destined to the server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A handy cheat sheet for these operations can be found at the
&lt;a href="#cheat-sheet"&gt;end&lt;/a&gt; of this post.&lt;/p&gt;
&lt;p&gt;But helping server or application administrators is not the only 
motivation to learn at least a little bit on how networking
on Linux platforms works. Not only are there things like
&lt;a href="https://www.nvidia.com/en-us/networking/ethernet-switching/cumulus-linux/"&gt;Cumulus Linux&lt;/a&gt;
or &lt;a href="https://frrouting.org/"&gt;FRRouting&lt;/a&gt; (the latter of which is also
used by the former) which you might encounter running on actual
networking gear in the forwarding path between servers. If you want
to get into network automation you will undoubtedly encounter Linux.
You might for example want to run
&lt;a href="https://docs.ansible.com/ansible/latest/network/index.html"&gt;Ansible&lt;/a&gt;
or &lt;a href="https://netbox.readthedocs.io/en/stable/"&gt;Netbox&lt;/a&gt; / &lt;a href="https://www.networktocode.com/nautobot/"&gt;Nautobot&lt;/a&gt;
both of which (currently) only run on Linux.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First we will start looking into ways of getting information about
its networking configuration and operational status from a modern
Linux system. I will be using a fresh Ubuntu 20.04 install via
Vagrant - you can use the following Vagrantfile if you want to
follow along.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class="c1"&gt;# vi: set ft=ruby :&lt;/span&gt;
&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;generic/ubuntu2004&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: By modern I mean a system that has
&lt;a href="https://linux.die.net/man/8/ip"&gt;iproute2&lt;/a&gt; available instead of or
in addition to the mostly deprecated
&lt;a href="https://linux.die.net/man/8/ifconfig"&gt;ifconfig&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Collecting basic operational networking data with &lt;code&gt;ip&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;One of the first things I learned on Cisco gear was
&lt;code&gt;show ip interface brief&lt;/code&gt; to output basic information about any
layer 3 interfaces. The more or less equivalent command from the
&lt;code&gt;iproute2&lt;/code&gt; command suite would be &lt;code&gt;ip -brief address show&lt;/code&gt;. The
Ubuntu VM I'm using currently only has one interface facing my
hypervisor as well as one loopback interface so the output is
quite short for now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip -brief address show
lo               UNKNOWN        &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8
eth0             UP             &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15/24 fe80::a00:27ff:fe05:8f3d/64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see the two aforementioned interfaces are present.
Furthermore, you can see their operational status (with lo being
&lt;code&gt;UNKNOWN&lt;/code&gt; as it is a loopback interface) as well as any IP
addresses configured on those devices.&lt;/p&gt;
&lt;p&gt;Of course, most people don't type &lt;code&gt;show ip interface brief&lt;/code&gt; on
Cisco gear - I myself shorten that to &lt;code&gt;sh ip int brief&lt;/code&gt; (which
is still more characters than really necessary). Similar to that,
I use &lt;code&gt;ip a&lt;/code&gt; on Linux devices. As you can see you can both shorten
the commands and omit the &lt;code&gt;show&lt;/code&gt; as it is the default behavior.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;ip -s address&lt;/code&gt; (with '-s' standing for 'statistics' and
no '-br' for 'brief') you get the the output of &lt;code&gt;sh ip int brief&lt;/code&gt;
interspersed with the some of the output of &lt;code&gt;show interface&lt;/code&gt;
(namely the statistics):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip -s address
&lt;span class="m"&gt;1&lt;/span&gt;: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;65536&lt;/span&gt; qdisc noqueue state UNKNOWN group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/loopback &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00 brd &lt;span class="m"&gt;00&lt;/span&gt;:00:00:00:00:00
    inet &lt;span class="m"&gt;127&lt;/span&gt;.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    RX: bytes  packets  errors  dropped overrun mcast
    &lt;span class="m"&gt;3640&lt;/span&gt;       &lt;span class="m"&gt;44&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;
    TX: bytes  packets  errors  dropped carrier collsns
    &lt;span class="m"&gt;3640&lt;/span&gt;       &lt;span class="m"&gt;44&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;
&lt;span class="m"&gt;2&lt;/span&gt;: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu &lt;span class="m"&gt;1500&lt;/span&gt; qdisc fq_codel state UP group default qlen &lt;span class="m"&gt;1000&lt;/span&gt;
    link/ether &lt;span class="m"&gt;08&lt;/span&gt;:00:27:05:8f:3d brd ff:ff:ff:ff:ff:ff
    inet &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15/24 brd &lt;span class="m"&gt;10&lt;/span&gt;.0.2.255 scope global dynamic eth0
       valid_lft 79238sec preferred_lft 79238sec
    inet6 fe80::a00:27ff:fe05:8f3d/64 scope link
       valid_lft forever preferred_lft forever
    RX: bytes  packets  errors  dropped overrun mcast
    &lt;span class="m"&gt;1108533&lt;/span&gt;    &lt;span class="m"&gt;3680&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;
    TX: bytes  packets  errors  dropped carrier collsns
    &lt;span class="m"&gt;220015&lt;/span&gt;     &lt;span class="m"&gt;2047&lt;/span&gt;     &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;       &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Another commonly used command on Cisco devices would
be &lt;code&gt;show ip route&lt;/code&gt;. By now you can probably tell yourself
what th equivalent for the &lt;code&gt;iproute2&lt;/code&gt; suite would be:
&lt;code&gt;ip route&lt;/code&gt; with an optional &lt;code&gt;show&lt;/code&gt; at the end (which is
the same words just in a different order):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip route show
default via &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev eth0 proto dhcp src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 metric &lt;span class="m"&gt;100&lt;/span&gt;
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.0/24 dev eth0 proto kernel scope link src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev eth0 proto dhcp scope link src &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15 metric &lt;span class="m"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now this is also comparatively boring as we only have
- A default route from DHCP
- A directly attached route for the network
- A host route for the interface itself
For comparison, here's a short excerpt from the Cisco
CLI containing the same kinds of routes (except for the
default route which is statically configured instead of
being issued by DHCP).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Switch&lt;/span&gt;&lt;span class="c1"&gt;#show ip route&lt;/span&gt;
&lt;span class="n"&gt;Codes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;RIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mobile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;BGP&lt;/span&gt;
       &lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;EIGRP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;EX&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;EIGRP&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IA&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;
       &lt;span class="n"&gt;N1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt; &lt;span class="n"&gt;NSSA&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt; &lt;span class="n"&gt;NSSA&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="n"&gt;E1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;E2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;OSPF&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;su&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IS&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IS&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IS&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
       &lt;span class="n"&gt;ia&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;IS&lt;/span&gt; &lt;span class="n"&gt;inter&lt;/span&gt; &lt;span class="n"&gt;area&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;candidate&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;per&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
       &lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ODR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;periodic&lt;/span&gt; &lt;span class="n"&gt;downloaded&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;NHRP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;LISP&lt;/span&gt;
       &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;
       &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;replicated&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="n"&gt;hop&lt;/span&gt; &lt;span class="n"&gt;override&lt;/span&gt;

&lt;span class="n"&gt;Gateway&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt; &lt;span class="n"&gt;resort&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;network&lt;/span&gt; &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;

&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;    &lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;via&lt;/span&gt; &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.1&lt;/span&gt;
      &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;variably&lt;/span&gt; &lt;span class="n"&gt;subnetted&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;subnets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;masks&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;        &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;directly&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GigabitEthernet0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;L&lt;/span&gt;        &lt;span class="mf"&gt;192.168&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;2.100&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;directly&lt;/span&gt; &lt;span class="n"&gt;connected&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GigabitEthernet0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally there is &lt;code&gt;ip neigh&lt;/code&gt; (equivalent to &lt;code&gt;show ip arp&lt;/code&gt;) available
to query the ARP table of the Linux host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip neigh show
&lt;span class="m"&gt;10&lt;/span&gt;.0.2.2 dev eth0 lladdr &lt;span class="m"&gt;52&lt;/span&gt;:54:00:12:35:02 REACHABLE 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With these simple commands you can already a lot of common
networking issues on Linux systems I have encountered:
- Wrongly configured subnet masks
- Missing (default) routes 
- Multiple interfaces with traffic using ones you didn't expect
  they would&lt;/p&gt;
&lt;p&gt;If you take a look at &lt;code&gt;ip help&lt;/code&gt; you can see there's a host
(pun intended) of other commands available for querying:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip &lt;span class="nb"&gt;help&lt;/span&gt;
Usage: ip &lt;span class="o"&gt;[&lt;/span&gt; OPTIONS &lt;span class="o"&gt;]&lt;/span&gt; OBJECT &lt;span class="o"&gt;{&lt;/span&gt; COMMAND &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;help&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
       ip &lt;span class="o"&gt;[&lt;/span&gt; -force &lt;span class="o"&gt;]&lt;/span&gt; -batch filename
where  OBJECT :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; link &lt;span class="p"&gt;|&lt;/span&gt; address &lt;span class="p"&gt;|&lt;/span&gt; addrlabel &lt;span class="p"&gt;|&lt;/span&gt; route &lt;span class="p"&gt;|&lt;/span&gt; rule &lt;span class="p"&gt;|&lt;/span&gt; neigh &lt;span class="p"&gt;|&lt;/span&gt; ntable &lt;span class="p"&gt;|&lt;/span&gt;
                   tunnel &lt;span class="p"&gt;|&lt;/span&gt; tuntap &lt;span class="p"&gt;|&lt;/span&gt; maddress &lt;span class="p"&gt;|&lt;/span&gt; mroute &lt;span class="p"&gt;|&lt;/span&gt; mrule &lt;span class="p"&gt;|&lt;/span&gt; monitor &lt;span class="p"&gt;|&lt;/span&gt; xfrm &lt;span class="p"&gt;|&lt;/span&gt;
                   netns &lt;span class="p"&gt;|&lt;/span&gt; l2tp &lt;span class="p"&gt;|&lt;/span&gt; fou &lt;span class="p"&gt;|&lt;/span&gt; macsec &lt;span class="p"&gt;|&lt;/span&gt; tcp_metrics &lt;span class="p"&gt;|&lt;/span&gt; token &lt;span class="p"&gt;|&lt;/span&gt; netconf &lt;span class="p"&gt;|&lt;/span&gt; ila &lt;span class="p"&gt;|&lt;/span&gt;
                   vrf &lt;span class="p"&gt;|&lt;/span&gt; sr &lt;span class="p"&gt;|&lt;/span&gt; nexthop &lt;span class="o"&gt;}&lt;/span&gt;
       OPTIONS :&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; -V&lt;span class="o"&gt;[&lt;/span&gt;ersion&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -s&lt;span class="o"&gt;[&lt;/span&gt;tatistics&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -d&lt;span class="o"&gt;[&lt;/span&gt;etails&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -r&lt;span class="o"&gt;[&lt;/span&gt;esolve&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -h&lt;span class="o"&gt;[&lt;/span&gt;uman-readable&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -iec &lt;span class="p"&gt;|&lt;/span&gt; -j&lt;span class="o"&gt;[&lt;/span&gt;son&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -p&lt;span class="o"&gt;[&lt;/span&gt;retty&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -f&lt;span class="o"&gt;[&lt;/span&gt;amily&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; inet &lt;span class="p"&gt;|&lt;/span&gt; inet6 &lt;span class="p"&gt;|&lt;/span&gt; mpls &lt;span class="p"&gt;|&lt;/span&gt; bridge &lt;span class="p"&gt;|&lt;/span&gt; link &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -4 &lt;span class="p"&gt;|&lt;/span&gt; -6 &lt;span class="p"&gt;|&lt;/span&gt; -I &lt;span class="p"&gt;|&lt;/span&gt; -D &lt;span class="p"&gt;|&lt;/span&gt; -M &lt;span class="p"&gt;|&lt;/span&gt; -B &lt;span class="p"&gt;|&lt;/span&gt; -0 &lt;span class="p"&gt;|&lt;/span&gt;
                    -l&lt;span class="o"&gt;[&lt;/span&gt;oops&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; maximum-addr-flush-attempts &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -br&lt;span class="o"&gt;[&lt;/span&gt;ief&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -o&lt;span class="o"&gt;[&lt;/span&gt;neline&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -t&lt;span class="o"&gt;[&lt;/span&gt;imestamp&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -ts&lt;span class="o"&gt;[&lt;/span&gt;hort&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -b&lt;span class="o"&gt;[&lt;/span&gt;atch&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;filename&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -rc&lt;span class="o"&gt;[&lt;/span&gt;vbuf&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;size&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -n&lt;span class="o"&gt;[&lt;/span&gt;etns&lt;span class="o"&gt;]&lt;/span&gt; name &lt;span class="p"&gt;|&lt;/span&gt; -N&lt;span class="o"&gt;[&lt;/span&gt;umeric&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; -a&lt;span class="o"&gt;[&lt;/span&gt;ll&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
                    -c&lt;span class="o"&gt;[&lt;/span&gt;olor&lt;span class="o"&gt;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you're interested in a good article on the topic of VRFs in
the Linux world, I recommend you go take a look at
&lt;a href="https://www.dasblinkenlichten.com/working-with-linux-vrfs/"&gt;this article&lt;/a&gt;
by Jon Langemak.&lt;/p&gt;
&lt;h2&gt;Using &lt;code&gt;jq&lt;/code&gt; to query JSON output&lt;/h2&gt;
&lt;p&gt;Sometimes you might want to filter the output of the commands
to get exactly the data you need in the format you need it in.
Luckily, the &lt;code&gt;ip&lt;/code&gt; command supports the outputting of 
structured data in the form of JSON by virtue of the &lt;code&gt;-j&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip -j route
&lt;span class="o"&gt;[{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;gateway&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.2&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;dhcp&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;metric&amp;quot;&lt;/span&gt;:100,&lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[]}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.0/24&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[]}&lt;/span&gt;,&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.2&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;dhcp&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;:&lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,&lt;span class="s2"&gt;&amp;quot;metric&amp;quot;&lt;/span&gt;:100,&lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;:&lt;span class="o"&gt;[]}]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That output is not really pretty, is it? Enter: &lt;code&gt;jq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: If you're following along on a brand new VM
you will at this point have to install the jq tool.
In the Ubuntu machine you get by using the Vagrantfile
at the beginning of this post that is done by
&lt;code&gt;sudo apt install jq -y&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jq&lt;/code&gt; is a command line JSON processor. In its simplest
form, we can use it to format the data in a prettier way:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip -j route &lt;span class="p"&gt;|&lt;/span&gt; jq
&lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;gateway&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.2&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;dhcp&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;metric&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;100&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.0/24&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;kernel&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;,
  &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;dst&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.2&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;dev&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;protocol&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;dhcp&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;scope&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;link&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;prefsrc&amp;quot;&lt;/span&gt;: &lt;span class="s2"&gt;&amp;quot;10.0.2.15&amp;quot;&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;metric&amp;quot;&lt;/span&gt;: &lt;span class="m"&gt;100&lt;/span&gt;,
    &lt;span class="s2"&gt;&amp;quot;flags&amp;quot;&lt;/span&gt;: &lt;span class="o"&gt;[]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While nicely colored and formatted CLI output is a
nice-to-have goodie, &lt;code&gt;jq&lt;/code&gt; really starts to shine
once you need to filter data you receive. Say you
want to find all interfaces that have transmitted
at least 100000 bytes of traffic and output their
names, you could use the following command to do
that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ip -j -s address &lt;span class="p"&gt;|&lt;/span&gt; jq &lt;span class="s1"&gt;&amp;#39;.[] | select(.stats64.rx.bytes &amp;gt; 100000) | .ifname&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I am aware that this example is somewhat
removed from what you might need in reality - I'm
merely using to show of some of what &lt;code&gt;jq&lt;/code&gt; can do.
You could just as well use this command to find
interfaces with error counters to identify potential
issues with packet loss.&lt;/p&gt;
&lt;h2&gt;Collecting application level data&lt;/h2&gt;
&lt;p&gt;When troubleshooting networking issues at any point
it's - in my opinion - always a good idea to start
at the bottom of the stack. Once you have verified
that the server has link status and appropriate
IP addresses as well as routes configured we can start
to verify if the fault lies with the application itself.
In order for any network communication to happen, a
socket has to have been opened on the correct TCP/UPD port.
The modern way of doing this is with the &lt;code&gt;ss&lt;/code&gt; command
(make sure to run with &lt;code&gt;sudo&lt;/code&gt; if you want the process names
to be output as well):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo ss -tulpen
Netid State  Recv-Q Send-Q Local Address:Port Peer Address:Port Process
udp   UNCONN &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;127&lt;/span&gt;.0.0.53%lo:53   &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*         users:&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemd-resolve&amp;quot;&lt;/span&gt;,pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;520&lt;/span&gt;,fd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; uid:101 ino:19780 sk:52 &amp;lt;-&amp;gt;
udp   UNCONN &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15%eth0:68  &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*         users:&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemd-network&amp;quot;&lt;/span&gt;,pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;379&lt;/span&gt;,fd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;19&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; uid:100 ino:23836 sk:53 &amp;lt;-&amp;gt;
tcp   LISTEN &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;4096&lt;/span&gt;   &lt;span class="m"&gt;127&lt;/span&gt;.0.0.53%lo:53   &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*         users:&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;systemd-resolve&amp;quot;&lt;/span&gt;,pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;520&lt;/span&gt;,fd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;13&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; uid:101 ino:19781 sk:54 &amp;lt;-&amp;gt;
tcp   LISTEN &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;128&lt;/span&gt;    &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:22         &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:*         users:&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sshd&amp;quot;&lt;/span&gt;,pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1059&lt;/span&gt;,fd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; ino:24086 sk:55 &amp;lt;-&amp;gt;
tcp   LISTEN &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;128&lt;/span&gt;    &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:22            &lt;span class="o"&gt;[&lt;/span&gt;::&lt;span class="o"&gt;]&lt;/span&gt;:*            users:&lt;span class="o"&gt;((&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sshd&amp;quot;&lt;/span&gt;,pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1059&lt;/span&gt;,fd&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; ino:24088 sk:56 v6only:1 &amp;lt;-&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an overview of all the open sockets (read:
transport layer ports accepting traffic). You can also
get a list of open connections using &lt;code&gt;ss&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ Netid State Recv-Q Send-Q Local Address:Port Peer Address:Port Process
tcp     ESTAB &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;10&lt;/span&gt;.0.2.15:ssh      &lt;span class="m"&gt;10&lt;/span&gt;.0.2.2:35294
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can for example use this output and match it up with
firewall logs or packet captures to see if clients
trying to establishing sessions are successful in doing so.&lt;/p&gt;
&lt;h1&gt;Command mapping table &lt;span id="cheat-sheet"&gt;&lt;span&gt;&lt;/h1&gt;
&lt;p&gt;Finally, I have compiled a small, cheat-sheet-esque table
mapping Cisco commands to &lt;code&gt;iproute2&lt;/code&gt; commands (with no
attempt at covering all there is to cover):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cisco IOS/NXOS&lt;/th&gt;
&lt;th&gt;&lt;code&gt;iproute2&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip interface brief&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip -br address&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show interface eth1/1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip -s link show eth0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip route&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip route&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip route 192.0.2.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip route get 192.0.2.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip route | json&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip -j route&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip arp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip neigh&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;show ip vrf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip vrf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;conf t&lt;/code&gt;, &lt;code&gt;int eth1/1&lt;/code&gt;, &lt;code&gt;shut&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip link set eth0 down&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;conf t&lt;/code&gt;, &lt;code&gt;int eth1/1&lt;/code&gt;, &lt;code&gt;no shut&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ip link set eth0 up&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="Networking"></category><category term="cisco"></category><category term="linux"></category></entry><entry><title>A quick introduction to netsim-tools</title><link href="https://kircheneer.github.io/blog/netsim-tools-quickstart.html" rel="alternate"></link><published>2021-05-13T14:44:00+02:00</published><updated>2021-05-13T14:44:00+02:00</updated><author><name>kirchnerl</name></author><id>tag:kircheneer.github.io,2021-05-13:/blog/netsim-tools-quickstart.html</id><summary type="html">&lt;p&gt;The somewhat newly released &lt;a href="https://github.com/ipspace/netsim-tools"&gt;netsim-tools&lt;/a&gt;
by &lt;a href="https://www.ipspace.net/Main_Page"&gt;Ivan Pepelnjak&lt;/a&gt; has been on my "check-this-out" list for a couple of weeks
now. It contains a set of tools to simplify the process of creating virtual network
labs. In the following sections I will lay out how to quickly get started with
labbing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The somewhat newly released &lt;a href="https://github.com/ipspace/netsim-tools"&gt;netsim-tools&lt;/a&gt;
by &lt;a href="https://www.ipspace.net/Main_Page"&gt;Ivan Pepelnjak&lt;/a&gt; has been on my "check-this-out" list for a couple of weeks
now. It contains a set of tools to simplify the process of creating virtual network
labs. In the following sections I will lay out how to quickly get started with
labbing on Cisco NXOS 9000v devices using netsim-tools.&lt;/p&gt;
&lt;h1&gt;Virtualizing network devices&lt;/h1&gt;
&lt;p&gt;In the past I have mostly used &lt;a href="https://gns3.com/"&gt;GNS3&lt;/a&gt; for my virtual
network labbing purposes. While this works quite well, I was a little
annoyed having to set up the same basic configuration everytime:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH access&lt;/li&gt;
&lt;li&gt;IP addresses on links between the devices&lt;/li&gt;
&lt;li&gt;Routing protocols&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ivan probably thought something along those lines as well when he created netsim-tools.
I started my foray into the project by contributing a little
&lt;a href="https://github.com/ipspace/netsim-tools/blob/master/install.libvirt"&gt;Ansible playbook&lt;/a&gt;
that installs the project and its dependencies to a Ubuntu machine
because I try to keep my testing VMs as cattle in regards to the
"Pets vs. Cattle" analogy.&lt;/p&gt;
&lt;h2&gt;Vagrantfile for netsim-tools&lt;/h2&gt;
&lt;p&gt;I'm using Vagrant for creating my development environment here. For the
purposes of this blog post I will assume that you already have Vagrant
installed. Otherwise, just take a look at the
&lt;a href="https://www.vagrantup.com/docs/installation"&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The first step will be creating a Vagrantfile for the test VM. I'm running
Virtualbox as the Vagrant provider from a Windows 10 machine, but thanks
to the power of Vagrant these instructions should work on any OS.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: A prerequisite is a host OS supporting nested virtualization, because
we will be using KVM isnide of the Vagrant provisioned Ubuntu VM.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# -*- mode: ruby -*-&lt;/span&gt;
&lt;span class="c1"&gt;# vi: set ft=ruby :&lt;/span&gt;

&lt;span class="no"&gt;Vagrant&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;configure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;box&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ubuntu/focal64&amp;quot;&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provider&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;virtualbox&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;16384&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpus&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
    &lt;span class="n"&gt;vb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;customize&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;modifyvm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;--nested-hw-virt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;on&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;provision&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;inline&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;-&lt;/span&gt;&lt;span class="dl"&gt;SHELL&lt;/span&gt;
&lt;span class="sh"&gt;    apt-get update&lt;/span&gt;
&lt;span class="sh"&gt;    apt-get install -y ansible python3-pip&lt;/span&gt;
&lt;span class="sh"&gt;    wget https://raw.githubusercontent.com/ipspace/netsim-tools/master/install.libvirt&lt;/span&gt;
&lt;span class="sh"&gt;    ansible-playbook install.libvirt&lt;/span&gt;
&lt;span class="sh"&gt;    usermod -aG libvirt vagrant&lt;/span&gt;
&lt;span class="sh"&gt;    pip install -r /opt/netsim-tools/requirements.txt&lt;/span&gt;
&lt;span class="sh"&gt;    pip install paramiko&lt;/span&gt;
&lt;span class="dl"&gt;  SHELL&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure to adjust the &lt;code&gt;vb.memory&lt;/code&gt; and &lt;code&gt;vg.cpus&lt;/code&gt; settings to your needs.
Virtualbox starts throwing warnings whenever you have a VM consuming
&gt;=75% of the hypervisor hosts memory capacity.&lt;/p&gt;
&lt;p&gt;Place this file in a directory on your host OS and then run &lt;code&gt;vagrant up&lt;/code&gt;.
This will do the following things (and therefore might take a little while):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and boot a Ubuntu 20.04 Vagrant box&lt;/li&gt;
&lt;li&gt;Enable nested virtualization in the Virtualbox settings of the VM&lt;/li&gt;
&lt;li&gt;Install Ansible inside of the box&lt;/li&gt;
&lt;li&gt;Use Vagrant provisioning to install netsim-tools to /opt/netsim-tools &lt;/li&gt;
&lt;li&gt;Change the owner of /opt/netsim-tools to the vagrant user&lt;/li&gt;
&lt;li&gt;Add the vagrant user to the libvirt group so we can use libvirt without &lt;code&gt;sudo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Install the dependencies of netsim-tools to the system Python interpreter&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;Note: We are using the system Python interpreter here instead of the
virtual Python environment the netsim-tools install playbook creates.
Normally, this would be a bad idea, but because this is a throwaway VM
we can remove that complexity.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The output of the Ansible playbook should be echoed to the shell running
&lt;code&gt;vagrant up&lt;/code&gt; so if there are any issues during the provisioning you should
be able to leverage that as debugging information.&lt;/p&gt;
&lt;p&gt;Once the machine successfully comes up, you can SSH into it with
&lt;code&gt;vagrant ssh&lt;/code&gt;. All subsequent command line excerpts are from the VM.&lt;/p&gt;
&lt;h2&gt;Readying the NXOS 9000v box for use with netsim-tools&lt;/h2&gt;
&lt;p&gt;Netsim-tools provides tools to perform the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Automate file creation based on a simple topology file for&lt;ul&gt;
&lt;li&gt;Vagrantfile&lt;/li&gt;
&lt;li&gt;Ansible inventory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deploy initial configuration with various optional features (e.g.
  basic routing protocol configuration) using Ansible&lt;/li&gt;
&lt;li&gt;Various other utilities for configuration management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unfortunately, you still have to put in a little leg work yourself to
get the VMs from the vendors. Juniper, Cisco and Arista for example
all allow for downloads of virtual appliances, but only once you sign up
on their web sites. Take a look at Ethan Banks blog post on this topic
&lt;a href="https://ethancbanks.com/free-networking-lab-images-from-arista-cisco-nvidia-cumulus/"&gt;here&lt;/a&gt;.
He explains where to find free networking lab images. In the coming steps
I will assume that you have downloaded a copy of a NXOS 9000v Vagrant box
and put that file into the directory containing the Vagrantfile of the
Ubuntu VM (Vagrant automatically syncs that directory to &lt;code&gt;/vagrant&lt;/code&gt; in the
guest operating system).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: While netsim-tools supports a Virtualbox backend for some of the VMs
(including the NXOS 9000v) I will, for the purposes of this blog post,
be using a libvirt backend.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In order to use that box with Vagrant and Ivan's tools you have to convert
the downloaded box to the libvirt provider with
&lt;code&gt;https://github.com/sciurus/vagrant-mutate&lt;/code&gt; and repackage it with the correct
version and name for netsim-tools to pick up. Don't worry if the mutate command
takes a while - it has to copy the contents of the entire box file at some point.
The &lt;code&gt;mv&lt;/code&gt; command is used to rename the box to the name at which netsim-tools
expects the box to be.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: You can skip the step of copying into &lt;code&gt;/tmp&lt;/code&gt; and have &lt;code&gt;vagrant mutate&lt;/code&gt; read from
&lt;code&gt;/vagrant&lt;/code&gt; directly - I opted not to do this because my &lt;code&gt;vagrant mutate&lt;/code&gt; command
always seemed to stall out at 99% when reading diretly from the shared folder.&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ls /vagrant
nexus9300v.9.3.7.box
$ vagrant plugin install vagrant-mutate
$ cp /vagrant/nexus9300v.9.3.7.box /tmp
$ vagrant mutate file:///tmp/nexus9300v.9.3.7.box libvirt
$ mv ~/.vagrant.d/boxes/nexus9300v.9.3.7/ ~/.vagrant.d/boxes/cisco-VAGRANTSLASH-nexus9300v
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you could start using the box manually, but we will be leveraging
netsim-tools to do most of the hard lifting for us. You might also want to copy
the box folder &lt;code&gt;~/.vagrant.d/boxes/cisco-VAGRANTSLASH-nexus9300v&lt;/code&gt; back to
&lt;code&gt;/vagrant&lt;/code&gt; in case you ever need to &lt;code&gt;vagrant destroy&lt;/code&gt; you Ubuntu VM.&lt;/p&gt;
&lt;h2&gt;Using netsim-tools&lt;/h2&gt;
&lt;p&gt;Netsim-tools uses a YAML files to describe topologies. These include
the actual nodes to be provisioned, links between the nodes,
any modules to be deployed onto the nodes and finally configuration
for those modules.&lt;/p&gt;
&lt;p&gt;Copy the content of the following topology file into
&lt;code&gt;/opt/netsim-tools/topology.yml&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nt"&gt;module&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p p-Indicator"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;bgp&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;ospf&lt;/span&gt; &lt;span class="p p-Indicator"&gt;]&lt;/span&gt;

&lt;span class="nt"&gt;bgp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;as&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;65000&lt;/span&gt;
&lt;span class="nt"&gt;ospf&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;area&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;0.0.0.0&lt;/span&gt;
&lt;span class="nt"&gt;defaults&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="nt"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;nxos&lt;/span&gt;
&lt;span class="nt"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;r1&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;r2&lt;/span&gt;
&lt;span class="nt"&gt;links&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="p p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l l-Scalar l-Scalar-Plain"&gt;r1-r2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This describes two connected Cisco NXOS with basic OSPF config to ensure
loopback interface reachability in order for a BGP session to be
established over those loopback interfaces.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;create-toplogy&lt;/code&gt; python script defaults to &lt;code&gt;./topology.yml&lt;/code&gt; as the
input and generates the following files as its output:
- Vagrantfile
- hosts.yml (Ansible inventory)
- ansible.cfg&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/netsim-tools
$ ./create-topology -g -i -c
Created provider configuration file: Vagrantfile
Created group_vars &lt;span class="k"&gt;for&lt;/span&gt; nxos
Created host_vars &lt;span class="k"&gt;for&lt;/span&gt; r1
Created host_vars &lt;span class="k"&gt;for&lt;/span&gt; r2
Created minimized Ansible inventory hosts.yml
Created Ansible configuration file: ansible.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make sure to take a look into the generated Vagrantfile. All the configuration
we entered manually when we instantiated the Ubuntu VM we are currently
operating in have been auto-generated for us by netsim-tools.&lt;/p&gt;
&lt;p&gt;A subsequent &lt;code&gt;vagrant up&lt;/code&gt; creates all the machines in the topology
with the appropriate links. This takes a couple of minutes on my setup;
your mileage may vary.&lt;/p&gt;
&lt;h2&gt;Debugging Vagrant / libvirt / vendor issues&lt;/h2&gt;
&lt;p&gt;If you experience any issues during &lt;code&gt;vagrant up&lt;/code&gt;, you can use the
following steps to debug the installation process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List all the virtual machines created with libvirt with &lt;code&gt;virsh list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Console into any failing devices with &lt;code&gt;virsh console netsim-tools_r1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I had one central problem which I found using this process:&lt;/p&gt;
&lt;p&gt;Neither NXOS nor Junos liked my setup with a Ubuntu VM using an AMD
CPU. This lead to issues where the Junos machine wouldn't boot at
all or the NXOS machine was unable to save its running configuration
to the startup configuration.I had to set &lt;code&gt;domain.cpu_mode = "custom"&lt;/code&gt;
on most VMs which sets the &lt;code&gt;--cpu qemu64&lt;/code&gt; flag for the qemu command
that runs the VM. This hinders performance but made all the machines
run fine.  With release 0.6.2 of netsim-tools this should be resolved,
as the &lt;code&gt;cpu_mode&lt;/code&gt; parameter is automatically set to &lt;code&gt;custom&lt;/code&gt;whenever
an AMD CPU is used.&lt;/p&gt;
&lt;h2&gt;Using Ansible with netsim-tools&lt;/h2&gt;
&lt;p&gt;After your VMs are all set up you can use Ansible to deploy the initial
configuration (including BGP and OSPF) to the virtual machines. We also
install Ansible and the paramiko dependency for the NXOS Ansible modules
into the virtual Python environment so we don't have to switch between
the virtual environment and the system Python interpreter all the time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /opt/netsim-tools
$ deactivate  &lt;span class="c1"&gt;# Ensure deactivation of the virtual environment&lt;/span&gt;
$ ansible-playbook initial-config.ansible --ssh-extra-args&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-o &amp;quot;StrictHostKeyChecking=no&amp;quot;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once that's done you can SSH into one of the machines and take a look
at the routing protocol state:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ ./connect.sh r1
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
r1# sh ip ospf neighbors
 OSPF Process ID &lt;span class="m"&gt;1&lt;/span&gt; VRF default
 Total number of neighbors: &lt;span class="m"&gt;1&lt;/span&gt;
 Neighbor ID     Pri State            Up Time  Address         Interface
 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2          &lt;span class="m"&gt;1&lt;/span&gt; FULL/ -          &lt;span class="m"&gt;00&lt;/span&gt;:00:08 &lt;span class="m"&gt;10&lt;/span&gt;.1.0.2        Eth1/1
r1# sh ip bgp neighbors &lt;span class="p"&gt;|&lt;/span&gt; i &lt;span class="s2"&gt;&amp;quot;neighbor is&amp;quot;&lt;/span&gt;
BGP neighbor is &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2, remote AS &lt;span class="m"&gt;65000&lt;/span&gt;, ibgp link, Peer index &lt;span class="m"&gt;3&lt;/span&gt;
r1# sh ip route
IP Route Table &lt;span class="k"&gt;for&lt;/span&gt; VRF &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt; denotes best ucast next-hop
&lt;span class="s1"&gt;&amp;#39;**&amp;#39;&lt;/span&gt; denotes best mcast next-hop
&lt;span class="s1"&gt;&amp;#39;[x/y]&amp;#39;&lt;/span&gt; denotes &lt;span class="o"&gt;[&lt;/span&gt;preference/metric&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;%&amp;lt;string&amp;gt;&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; via output denotes VRF &amp;lt;string&amp;gt;

&lt;span class="m"&gt;10&lt;/span&gt;.0.0.1/32, ubest/mbest: &lt;span class="m"&gt;2&lt;/span&gt;/0, attached
    *via &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1, Lo0, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;/0&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:01:25, &lt;span class="nb"&gt;local&lt;/span&gt;
    *via &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1, Lo0, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;/0&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:01:25, direct
&lt;span class="m"&gt;10&lt;/span&gt;.0.0.2/32, ubest/mbest: &lt;span class="m"&gt;1&lt;/span&gt;/0
    *via &lt;span class="m"&gt;10&lt;/span&gt;.1.0.2, Eth1/1, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;110&lt;/span&gt;/41&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:00:58, ospf-1, intra
&lt;span class="m"&gt;10&lt;/span&gt;.1.0.0/30, ubest/mbest: &lt;span class="m"&gt;1&lt;/span&gt;/0, attached
    *via &lt;span class="m"&gt;10&lt;/span&gt;.1.0.1, Eth1/1, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;/0&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:01:23, direct
&lt;span class="m"&gt;10&lt;/span&gt;.1.0.1/32, ubest/mbest: &lt;span class="m"&gt;1&lt;/span&gt;/0, attached
    *via &lt;span class="m"&gt;10&lt;/span&gt;.1.0.1, Eth1/1, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;/0&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;00&lt;/span&gt;:01:23, &lt;span class="nb"&gt;local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see at this point the routing protocol neighborships
have been successfully established.&lt;/p&gt;
&lt;p&gt;Apart from deploying pre-baked initial configurations we can also use the
&lt;code&gt;config.ansible&lt;/code&gt; playbook to deploy our own custom configuration templates
to the devices as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;no feature telnet&amp;quot;&lt;/span&gt; &amp;gt; config.j2
$ ansible-playbook config.ansible -e &lt;span class="nv"&gt;config&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can of course get more complex with those templates rather than merely
disabling telnet.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this blog post I demonstrated how to use Vagrant, netsim-tools and Linux
to build a virtual network lab. I personally feel like the instant Ansible
integration and batteries-includedness regarding boilerplate routing protocol
configuration are useful enough for me to forgive the lack of a shiny graphical
user interface guiding me through the process. Finally, I'd like to thank Ivan
Pepelnjak for his patience in accepting my many pull requests over the course
of my exploration into the world of netsim-tools.&lt;/p&gt;
&lt;p&gt;If you want to find out more about netsim-tools, make sure to visit Ivan's
&lt;a href="https://blog.ipspace.net/series/netsim-tools.html"&gt;blog&lt;/a&gt; about it. Thanks
for reading!&lt;/p&gt;</content><category term="Networking"></category><category term="ansible"></category><category term="vagrant"></category><category term="libvirt"></category><category term="cisco"></category><category term="linux"></category></entry><entry><title>Docker alongside GNS3 on a Windows / AMD system</title><link href="https://kircheneer.github.io/blog/docker-alongside-gns3-on-a-windows-amd-system.html" rel="alternate"></link><published>2020-11-23T19:49:00+01:00</published><updated>2020-11-23T19:49:00+01:00</updated><author><name>kirchnerl</name></author><id>tag:kircheneer.github.io,2020-11-23:/blog/docker-alongside-gns3-on-a-windows-amd-system.html</id><summary type="html">&lt;p&gt;When trying to run &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://gns3.com/"&gt;GNS3&lt;/a&gt; on the same Windows system with an
AMD processor I was faced with the following challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;Docker for Desktop&lt;/a&gt; on Windows requires Hyper-V or WSL2,
  the latter in turn requires Hyper-V&lt;/li&gt;
&lt;li&gt;Hyper-V on AMD processors only supports nested virtualization as of
  &lt;a href="https://techcommunity.microsoft.com/t5/virtualization/amd-nested-virtualization-support/ba-p/1434841"&gt;2020&lt;/a&gt;
  (in …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;When trying to run &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; and &lt;a href="https://gns3.com/"&gt;GNS3&lt;/a&gt; on the same Windows system with an
AMD processor I was faced with the following challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.docker.com/docker-for-windows/install/"&gt;Docker for Desktop&lt;/a&gt; on Windows requires Hyper-V or WSL2,
  the latter in turn requires Hyper-V&lt;/li&gt;
&lt;li&gt;Hyper-V on AMD processors only supports nested virtualization as of
  &lt;a href="https://techcommunity.microsoft.com/t5/virtualization/amd-nested-virtualization-support/ba-p/1434841"&gt;2020&lt;/a&gt;
  (in fact the official docs still say that
  "&lt;a href="https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/user-guide/nested-virtualization"&gt;nesting is currently Intel-only&lt;/a&gt;")&lt;/li&gt;
&lt;li&gt;Hyper-V officially supports only Hyper-V itself for netsed virtualization, therefore rendering it useless for
  running GNS3&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After being fed up with running GNS3 on a separate physical Linux machine I tried to come up with an actual solution to
the problem. Seeing as I was already running Docker and GNS3 on an Ubuntu device I figured it should be possible to expose both of that to a Windows host through a (non Hyper-V!) VM.&lt;/p&gt;
&lt;h2&gt;Installing GNS3 in a Ubuntu VM&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;You need a working Ubuntu VM with a network interface bridged to the internet-facing interface of the host system to
follow along. Seeing as there are already lots of very good tutorials on virtualization and the installation of Ubuntu
I won't cover this here. Free options are for example &lt;a href="https://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt; or
&lt;a href="https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html"&gt;VMWare Workstation Player&lt;/a&gt;
(assuming you use it non-commercially).&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First off, make sure your VM is able to actually perform nested virtualization, as without it, this whole exercise
would be quite pointless.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ kvm-ok
INFO: /dev/kvm exists
KVM acceleration can be used
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The GNS3 &lt;a href="https://docs.gns3.com/docs/getting-started/installation/linux/"&gt;documentation&lt;/a&gt; for installing it on a
Ubuntu-based distro is straight-forward. One thing I found was missing there was the daemonization of GNS3. Fortunately
enough they provide a Systemd service file
&lt;a href="https://raw.githubusercontent.com/GNS3/gns3-server/master/init/gns3.service.systemd"&gt;here&lt;/a&gt;. The following steps
configure the GNS3 daemon:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /etc/systemd/system
$ sudo wget https://raw.githubusercontent.com/GNS3/gns3-server/master/init/gns3.service.systemd
$ sudo mv gns3.service.systemd gns3.service
$ sudo useradd gns3
$ sudo usermod -aG ubridge gns3
$ sudo usermod -aG libvirt gns3 
$ sudo usermod -aG kvm gns3
$ sudo usermod -aG wireshark gns3
$ sudo usermod -aG docker gns3
$ sudo sed -i &lt;span class="s1"&gt;&amp;#39;s/\/var\/run\/run/&amp;#39;&lt;/span&gt; gns3.service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last line fixes the fact that &lt;code&gt;/var/run&lt;/code&gt; symlinks to &lt;code&gt;/run&lt;/code&gt; on newer Ubuntu distributions. Start and enable the
service to run on startup and check on its status. If you the &lt;code&gt;Active: active (running)&lt;/code&gt; then everything went well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo systemctl start gns3
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; gns3
$ sudo systemctl status gns3
● gns3.service - GNS3 server
    Loaded: loaded &lt;span class="o"&gt;(&lt;/span&gt;/etc/systemd/system/gns3.service&lt;span class="p"&gt;;&lt;/span&gt; enabled&lt;span class="p"&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class="o"&gt;)&lt;/span&gt;
    Active: active &lt;span class="o"&gt;(&lt;/span&gt;running&lt;span class="o"&gt;)&lt;/span&gt; since Mon &lt;span class="m"&gt;2020&lt;/span&gt;-11-23 &lt;span class="m"&gt;20&lt;/span&gt;:05:39 CET&lt;span class="p"&gt;;&lt;/span&gt; 18s ago
&lt;span class="o"&gt;[&lt;/span&gt;...&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, either make sure that the host firewall is inactive or open the port in order to be able to access the GNS3
server from your Windows host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo ufw status
 Status: inactive
&lt;span class="c1"&gt;# OR&lt;/span&gt;
$ sudo ufw allow &lt;span class="m"&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The last remaining step is to configure your GNS3 to use the server as the primary server. To check on how to do that,
take a look &lt;a href="https://docs.gns3.com/docs/getting-started/installation/one-server-multiple-clients/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Exposing Docker in a Ubuntu VM&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Disclaimer&lt;/em&gt;&lt;/strong&gt;&lt;strong&gt;:&lt;/strong&gt; &lt;em&gt;The below steps expose an unauthenticated and unencrypted HTTP Docker daemon to the network.
Do not do this in a production environment or really anywhere that isn't on your home network. To find out how to
secure the Docker daemon, take a look&lt;/em&gt; &lt;a href="https://docs.docker.com/engine/security/https/"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you haven't already installed Docker during the course of the GNS3 installation, take a look at how to install
Docker on a Ubuntu system &lt;a href="https://docs.docker.com/engine/install/ubuntu/"&gt;here&lt;/a&gt;. Out of the box the Docker daemon
runs locally on a &lt;a href="https://man7.org/linux/man-pages/man7/unix.7.html"&gt;Unix socket&lt;/a&gt;, walled of from the network. Because
we want to access it from our Windows host (which is reachable only through the network interface), we need to change
this. Systemd provides a mechanism for editing the service files without changing the original service file. This is
neat, because it ensures that the configuration properly persists through updates of the Docker packages.&lt;/p&gt;
&lt;p&gt;Use the following commands to automatically create a &lt;code&gt;gns3.service.d&lt;/code&gt; directory and &lt;code&gt;override.conf&lt;/code&gt; with a
configuration that exposes the Docker daemon on port TCP/4243 of the VM (as demonstrated above make sure the firewall
configuration matches this). If you want to use Docker containers within GNS3 it is vital that you keep the Unix socket
configuration next to the TCP configuration, otherwise the GNS3 daemon will find itself unable to talk to the Docker
daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ sudo systemctl edit docker.service /etc/systemd/system/docker.service
&lt;span class="c1"&gt;## Enter following content into file&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;Service&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;
&lt;span class="nv"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:4243
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can also verify if your changes the service file were applied properly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;systemctl&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;...&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;systemd&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;system&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;service&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;override&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Service&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="n"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dockerd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;tcp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4243&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finishing up, we need to reload the service files and then restart the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reload&lt;/span&gt;
&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;systemctl&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Your Docker daemon should now be up and running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;$ netstat -tpln &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;4243&lt;/span&gt;
tcp6       &lt;span class="m"&gt;0&lt;/span&gt;      &lt;span class="m"&gt;0&lt;/span&gt; :::4243                 :::*                    LISTEN      -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Docker configuration on the Windows host&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;If you don't mind installing the Docker daemon (even though you won't run it) as well as&lt;/em&gt; &lt;code&gt;docker.exe&lt;/code&gt; &lt;em&gt;and&lt;/em&gt;
&lt;code&gt;docker-compose.exe&lt;/code&gt; &lt;em&gt;on your Windows system you can simply use the&lt;/em&gt;
&lt;a href="https://docs.docker.com/docker-for-windows/"&gt;&lt;em&gt;official installer&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. Otherwise you can grab the newest release from&lt;/em&gt;
&lt;a href="https://github.com/docker/cli"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In order to configure your newly aquired Docker CLI to use the remote Docker daemon, you can either set the environment
variable &lt;code&gt;DOCKER_HOST&lt;/code&gt; to the Ubuntu VM (e.g. &lt;code&gt;tcp://192.168.0.100:4243&lt;/code&gt;), use &lt;code&gt;docker -H tcp://192.178.0.100:4243 ...&lt;/code&gt;
or use the&lt;a href="https://docs.microsoft.com/en-us/virtualization/windowscontainers/manage-docker/configure-docker-daemon"&gt;configuration file&lt;/a&gt;.
With either of these options configured properly you should now be able to use the Docker (or docker-compose)
CLI from your Windows host:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;PS&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;hello-world&lt;/span&gt;
 &lt;span class="n"&gt;Hello&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt;&lt;span class="p"&gt;!&lt;/span&gt;
 &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="n"&gt;shows&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;installation&lt;/span&gt; &lt;span class="n"&gt;appears&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;working&lt;/span&gt; &lt;span class="n"&gt;correctly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;generate&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;took&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;steps&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
 &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="n"&gt;contacted&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="n"&gt;pulled&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;hello-world&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;Hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amd64&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
 &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;runs&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt;
 &lt;span class="n"&gt;executable&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;produces&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;currently&lt;/span&gt; &lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
 &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt; &lt;span class="n"&gt;streamed&lt;/span&gt; &lt;span class="n"&gt;that&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;sent&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
 &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;terminal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; 
 &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;ambitious&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;Ubuntu&lt;/span&gt; &lt;span class="n"&gt;container&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="p"&gt;$&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;-it&lt;/span&gt; &lt;span class="n"&gt;ubuntu&lt;/span&gt; &lt;span class="n"&gt;bash&lt;/span&gt;
 &lt;span class="n"&gt;Share&lt;/span&gt; &lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;automate&lt;/span&gt; &lt;span class="n"&gt;workflows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;free&lt;/span&gt; &lt;span class="n"&gt;Docker&lt;/span&gt; &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;//&lt;/span&gt;&lt;span class="n"&gt;hub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;
 &lt;span class="k"&gt;For&lt;/span&gt; &lt;span class="n"&gt;more&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ideas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="p"&gt;//&lt;/span&gt;&lt;span class="n"&gt;docs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;get-started&lt;/span&gt;&lt;span class="p"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="Networking"></category><category term="GNS3"></category><category term="Linux"></category><category term="Networking"></category></entry></feed>